{
  "NS Bundle Installation Script": {
    "scope": "typescript",
    "prefix": "nstemplatebundleinstallation",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType BundleInstallationScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * Defines the function that is executed before a bundle is installed for the first time in a target account.",
      " * @param {Object} ctx - The script context.",
      " * @param {number} ctx.version - The version of the bundle that is being installed in the target account.",
      " * @returns {void}",
      " * @since 2016.1",
      " */",
      "const beforeInstall: EntryPoints.BundleInstallation.beforeInstall = (ctx: EntryPoints.BundleInstallation.onBeforeInstallContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed after a bundle is installed for the first time in a target account.",
      " * @param {Object} ctx - The script context.",
      " * @param {number} ctx.version - The version of the bundle that is being installed in the target account.",
      " * @returns {void}",
      " * @since 2016.1",
      " */",
      "const afterInstall: EntryPoints.BundleInstallation.afterInstall = (ctx: EntryPoints.BundleInstallation.onAfterInstallContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${5://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed before a bundle in a target account is updated.",
      " * @param {Object} ctx - The script context.",
      " * @param {number} ctx.fromVersion - The version of the bundle that is currently installed in the target account.",
      " * @param {number} ctx.toVersion - The new version of the bundle that is being installed in the target account.",
      " * @returns {void}",
      " * @since 2016.1",
      " */",
      "const beforeUpdate: EntryPoints.BundleInstallation.beforeUpdate = (ctx: EntryPoints.BundleInstallation.onBeforeUpdateContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${6://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed after a bundle in a target account is updated.",
      " * @param {Object} ctx - The script context.",
      " * @param {number} ctx.fromVersion - The version of the bundle that is currently installed in the target account.",
      " * @param {number} ctx.toVersion - The new version of the bundle that is being installed in the target account.",
      " * @returns {void}",
      " * @since 2016.1",
      " */",
      "const afterUpdate: EntryPoints.BundleInstallation.afterUpdate = (ctx: EntryPoints.BundleInstallation.onAfterUpdateContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${7://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed before a bundle is uninstalled from a target account.",
      " * @param {Object} ctx - The script context.",
      " * @param {number} ctx.version - The version of the bundle that is being uninstalled from the target account.",
      " * @returns {void}",
      " * @since 2016.1",
      " */",
      "const beforeUninstall: EntryPoints.BundleInstallation.beforeUninstall = (ctx: EntryPoints.BundleInstallation.onBeforeUninstallContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${8://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "export { beforeInstall, afterInstall, beforeUpdate, afterUpdate, beforeUninstall };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Bundle Installation Script"
  },
  "NS Client Script": {
    "scope": "typescript",
    "prefix": "nstemplateclient",
    "body": [
      "/**",
      " * @NApiVersion 2.x",
      " * @NScriptType ClientScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notifyAsync } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * Defines the function that is executed after the page completes loading or when the form is reset.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.mode - The mode in which the record is being accessed (copy, create, edit).",
      " * @returns {void}",
      " * @since 2015.2",
      " */",
      "const pageInit: EntryPoints.Client.pageInit = (ctx: EntryPoints.Client.pageInitContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed when a field is changed by a user or client side call.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.sublistId - The sublist ID name.",
      " * @param {string} ctx.fieldId - The field ID name.",
      " * @param {number} ctx.line - The line number (zero-based index) if the field is in a sublist or a matrix.",
      " * @param {number} ctx.column - The column number (zero-based index) if the field is in a matrix.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const fieldChanged: EntryPoints.Client.fieldChanged = (ctx: EntryPoints.Client.fieldChangedContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${5://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed executed when a field that sources information from another field is modified. Executes on transaction forms only.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.sublistId - The sublist ID name.",
      " * @param {string} ctx.fieldId - The field ID name.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const postSourcing: EntryPoints.Client.postSourcing = (ctx: EntryPoints.Client.postSourcingContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${6://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed after a sublist is inserted, removed, or edited.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.sublistId - The sublist ID name.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const sublistChanged: EntryPoints.Client.sublistChanged = (ctx: EntryPoints.Client.sublistChangedContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${7://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed when an existing line is selected.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.sublistId - The sublist ID name.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const lineInit: EntryPoints.Client.lineInit = (ctx: EntryPoints.Client.lineInitContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${8://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the validation function that is executed when a field is changed by a user or client side call.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.sublistId - The sublist ID name.",
      " * @param {string} ctx.fieldId - The field ID name.",
      " * @param {number} ctx.line - The line number (zero-based index) if the field is in a sublist or a matrix.",
      " * @param {number} ctx.column - The column number (zero-based index) if the field is in a matrix.",
      " * @returns {boolean} - Returns true if the field is valid and the change is successful, false otherwise.",
      " * @Since 2015.2",
      " */",
      "const validateField: EntryPoints.Client.validateField = (ctx: EntryPoints.Client.validateFieldContext): boolean => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${9://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn true;",
      "};",
      "",
      "/**",
      " * Defines the validation function that is executed before a line is added to an inline editor sublist or editor sublist.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.sublistId - The sublist ID name.",
      " * @returns {boolean} - Returns true if the sublist line is valid and the addition is successful, false otherwise.",
      " * @Since 2015.2",
      " */",
      "const validateLine: EntryPoints.Client.validateLine = (ctx: EntryPoints.Client.validateLineContext): boolean => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${10://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t\treturn false;",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn true;",
      "};",
      "",
      "/**",
      " * Defines the validation function that is executed when a sublist line is inserted into an edit sublist.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.sublistId - The sublist ID name.",
      " * @returns {boolean} - Returns true if the sublist line is valid and the insertion is successful, false otherwise.",
      " * @Since 2015.2",
      " */",
      "const validateInsert: EntryPoints.Client.validateInsert = (ctx: EntryPoints.Client.validateInsertContext): boolean => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${11://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t\treturn false;",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn true;",
      "};",
      "",
      "/**",
      " * Defines the validation function that is executed when an existing line in an edit sublist is deleted.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @param {string} ctx.sublistId - The sublist ID name.",
      " * @param {number} ctx.lineCount - The number of lines to be deleted.",
      " * @returns {boolean} - Returns true if the sublist line is valid and the delete is successful, false otherwise.",
      " * @Since 2015.2",
      " */",
      "const validateDelete: EntryPoints.Client.validateDelete = (ctx: EntryPoints.Client.validateDeleteContext): boolean => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${12://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t\treturn false;",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn true;",
      "};",
      "",
      "/**",
      " * Defines the function that is executed when a record is saved (after the submit button is pressed but before the form is submitted).",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.currentRecord - The current form record.",
      " * @returns {boolean} - Returns true if the record is valid and is saved, false otherwise.",
      " * @Since 2015.2",
      " */",
      "const saveRecord: EntryPoints.Client.saveRecord = (ctx: EntryPoints.Client.saveRecordContext): boolean => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${13://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotifyAsync(err, ctx.currentRecord, errOptions);",
      "\t\treturn false;",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn true;",
      "};",
      "",
      "export { pageInit, fieldChanged, postSourcing, sublistChanged, lineInit, validateField, validateLine, validateInsert, validateDelete, saveRecord };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Client Script"
  },
  "NS Map/Reduce Script": {
    "scope": "typescript",
    "prefix": "nstemplatemapreduce",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType MapReduceScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * @typedef {Object} ObjectRef - Input data object.",
      " * @property {number} id - The internal ID or script ID of the input data object.",
      " * @property {string} type - The type of the input data object.",
      " */",
      "/**",
      " * Marks the beginning of the Map/Reduce process and generates input data.",
      " * @param {Object} ctx - The input context.",
      " * @param {boolean} ctx.isRestarted - Indicates whether the current invocation of the getInputData function is the first.",
      " * @param {ObjectRef} ctx.ObjectRef - Input data object.",
      " * @returns {Array|Object|Search|ObjectRef|File|Query}",
      " * @Since 2015.2",
      " */",
      "const getInputData: EntryPoints.MapReduce.getInputData = (ctx: EntryPoints.MapReduce.getInputDataContext): unknown => {",
      "\ttry {",
      "\t\t${4://}${0}",
      "",
      "\t\treturn {};",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn {};",
      "\t}",
      "};",
      "",
      "/**",
      " * Executes when the map entry point is triggered and applies to each key/value pair.",
      " * @param {Object} ctx - Object that contains:",
      " *                       - The key/value pairs to process during the map stage.",
      " *                       - Logic that lets you save data to pass to the reduce stage.",
      " *                       - Other properties you can use within the map function.",
      " * @param {boolean} ctx.isRestarted - Indicates whether the map() function has been invoked previously for the current key/value pair.",
      " * @param {number} ctx.executionNo - Indicates whether the current invocation of the map() function is the first or a subsequent invocation for the current key/value pair.",
      " * @param {Iterator} ctx.errors - Holds serialized errors that were thrown during previous attempts to execute the map function on the current key/value pair.",
      " * @param {string} ctx.key - The key to be processed during the map stage:",
      " *                           - If the input type is an array, the key is the index of the element.",
      " *                           - If the input type is an object, the key is the key in the object.",
      " *                           - If the input type is a result set, the key is the internal ID of the result. If the search result has no internal ID, the key is the index of the search result.",
      " * @param {string} ctx.value - The value to be processed during the map stage:",
      " *                             - If the input type is an array, the ctx.value is the value in the element.",
      " *                             - If the input type is an object, the ctx.value is the value in the object.",
      " *                             - If the input type is a result set, the the ctx.value is a search.Result object converted to a JSON string by using JSON.stringify().",
      " * @param {function({key: string|Object, value: string|Object}): void} ctx.write - Writes the key/value pairs to be passed to the shuffle and then the reduce stage.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const map: EntryPoints.MapReduce.map = (ctx: EntryPoints.MapReduce.mapContext): void => {",
      "\tconst result = JSON.parse(ctx.value);",
      "\tlog.debug('Result', result);",
      "",
      "\t${5://}",
      "};",
      "",
      "/**",
      " * Executes when the reduce entry point is triggered and applies to each group.",
      " * @param {Object} ctx - Contains the key/value pairs to process during the reduce stage.",
      " * @param {boolean} ctx.isRestarted - Indicates whether the reduce() function has been invoked previously for the current key and values.",
      " * @param {number} ctx.executionNo - Indicates whether the current invocation of the reduce() function is the first, second, third, or fourth for the current key and its values.",
      " * @param {Iterator} ctx.errors - Holds serialized errors that were thrown during previous attempts to execute the reduce function on the current key and its values.",
      " * @param {string} ctx.key - When the map/reduce process includes a map stage, the reduce keys are the keys written by ctx.write().",
      " *                           When the map stage is skipped, the reduce keys are provided by the getInputData stage:",
      " *                           - If the input type is an array, the key is the index of the element.",
      " *                           - If the input type is an object, the key is the key in the object.",
      " *                           - If the input type is a result set, the key is the internal ID of the result.",
      " * @param {string[]} ctx.values - This array holds all values associated with a unique key that was passed to the reduce stage for processing. These values are listed in lexicographical order.",
      " *                                When the map/reduce process includes a map stage, the key/value pairs passed to the reduce stage are derived from the values written by ctx.write().",
      " *                                When the map stage is skipped, the values are determined by the getInputData stage:",
      " *                                - If the input type is an array, it is the value in the element.",
      " *                                - If the input type is an object, it is the value in the object.",
      " *                                - If the input type is a result set, the value is a search.Result object converted to a JSON string with JSON.stringify().",
      " * @param {function({key: string|Object, value: string|Object}): void} ctx.write - Writes the key/value pairs.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const reduce: EntryPoints.MapReduce.reduce = (ctx: EntryPoints.MapReduce.reduceContext): void => {",
      "\t${6://}",
      "};",
      "",
      "/**",
      " * @typedef {Object} InputSummary - Holds statistics regarding the input stage.",
      " * @property {Date} dateCreated - The time and day when getInputData() began running.",
      " * @property {number} seconds - Total seconds elapsed when running getInputData() (does not include idle time).",
      " * @property {number} usage - Total number of usage units consumed when running getInputData().",
      " * @property {string} error - If applicable, holds a serialized error that is thrown from getInputData().",
      " */",
      "/**",
      " * @typedef {Object} MapSummary - Holds statistics regarding the map stage.",
      " * @property {number} concurrency - The maximum concurrency number for executing parallel tasks during the map stage.",
      " * @property {Date} dateCreated - The time and day when map() began running.",
      " * @property {Iterator} keys - Holds the keys that were passed to the map stage by the getInputData stage.",
      " * @property {number} seconds - Total seconds elapsed when running map().",
      " * @property {number} usage - Total number of usage units consumed when running map().",
      " * @property {number} yields - Total number of times yields when running map().",
      " * @property {Iterator} errors - Holds all serialized errors thrown from the map() function.",
      " */",
      "/**",
      " * @typedef {Object} ReduceSummary - Holds statistics regarding the reduce stage.",
      " * @property {number} concurrency - The maximum concurrency number for executing parallel tasks during the reduce stage.",
      " * @property {Date} dateCreated - The time and day when reduce() began running.",
      " * @property {Iterator} keys - Holds the keys that were passed to the reduce stage by the getInputData stage.",
      " * @property {number} seconds - Total seconds elapsed when running reduce().",
      " * @property {number} usage - Total number of usage units consumed when running reduce().",
      " * @property {number} yields - Total number of times yields when running reduce().",
      " * @property {Iterator} errors - Holds all serialized errors thrown from the reduce() function.",
      " */",
      "/**",
      " * Executes when the summarize entry point is triggered and applies to the result set.",
      " * @param {Object} ctx - Holds statistics regarding execution of a map/reduce script.",
      " * @param {boolean} ctx.isRestarted - Indicates whether the summarize(summaryContext) function was invoked again.",
      " * @param {number} ctx.concurrency - The maximum concurrency number when executing parallel tasks for the map/reduce script.",
      " * @param {Date} ctx.dateCreated - The time and day when the map/reduce script began running.",
      " * @param {number} ctx.seconds - Total seconds elapsed when running the map/reduce script.",
      " * @param {number} ctx.usage - Total number of usage units consumed when running the map/reduce script.",
      " * @param {number} ctx.yields - Total number of yields when running the map/reduce script.",
      " * @param {InputSummary} ctx.inputSummary - Holds statistics regarding the input stage.",
      " * @param {MapSummary} ctx.mapSummary - Holds statistics regarding the map stage.",
      " * @param {ReduceSummary} ctx.reduceSummary - Holds statistics regarding the reduce stage.",
      " * @param {Iterator} ctx.output - Iterator that provides keys and values that are saved as output during the reduce stage.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const summarize: EntryPoints.MapReduce.summarize = (ctx: EntryPoints.MapReduce.summarizeContext): void => {",
      "\tlog.debug('Seconds', ctx.seconds);",
      "\tlog.debug('Usage', ctx.usage);",
      "\tlog.debug('Yields', ctx.yields);",
      "\tlog.debug('Concurrency', ctx.concurrency);",
      "\tconst mapKeys: string[] = [];",
      "\tctx.mapSummary.keys.iterator().each((key) => {",
      "\t\tmapKeys.push(key);",
      "\t\treturn true;",
      "\t});",
      "\tlog.debug('Map Keys Processed', mapKeys.length);",
      "\tctx.mapSummary.errors.iterator().each((key, error) => {",
      "\t\tlog.debug(`Map Error For Key: \\${key\\}`, error);",
      "\t\tnotify(JSON.parse(error), undefined, errOptions);",
      "\t\treturn true;",
      "\t});",
      "\tconst reduceKeys: string[] = [];",
      "\tctx.reduceSummary.keys.iterator().each((key) => {",
      "\t\treduceKeys.push(key);",
      "\t\treturn true;",
      "\t});",
      "\tlog.debug('Reduce Keys Processed', reduceKeys.length);",
      "\tctx.reduceSummary.errors.iterator().each((key, error) => {",
      "\t\tlog.debug(`Reduce Error For Key: \\${key\\}`, error);",
      "\t\tnotify(JSON.parse(error), undefined, errOptions);",
      "\t\treturn true;",
      "\t});",
      "};",
      "",
      "export { getInputData, map, reduce, summarize };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Map/Reduce Script"
  },
  "NS Mass Update Script": {
    "scope": "typescript",
    "prefix": "nstemplatemassupdate",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType MassUpdateScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * Definition of Mass Update trigger point.",
      " * @param {Object} ctx - The script context.",
      " * @param {number} ctx.id - The ID of the record being processed by the mass update.",
      " * @param {string} ctx.type - The record type of the record being processed by the mass update.",
      " * @returns {void}",
      " * @since 2016.1",
      " */",
      "const each: EntryPoints.MassUpdate.each = (ctx: EntryPoints.MassUpdate.eachContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, ctx, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "export { each };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Mass Update Script"
  },
  "NS Portlet Script": {
    "scope": "typescript",
    "prefix": "nstemplateportlet",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType Portlet",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * @typedef {Object} SimpleFormPortlet - The Portlet object used for rendering.",
      " * @property {number|string} clientScriptFileId - The script file ID to be used in the portlet.",
      " * @property {string} clientScriptModulePath - The script path to be used in the portlet.",
      " * @property {string} title - The title of the portlet.",
      " * @property {function({id: string, label: string, type: string, source?: string}): Field} addField - Adds a field to the form.",
      " * @property {function({url: string, label?: string, target?: string}): Button} setSubmitButton - Adds a submit button to the form.",
      " */",
      "/**",
      " * @typedef {Object} InlineHTMLPortlet - The Portlet object used for rendering.",
      " * @property {string} html - The complete HTML contents of the portlet.",
      " * @property {string} title - The title of the portlet.",
      " */",
      "/**",
      " * @typedef {Object} LinksandIndentsPortlet - The Portlet object used for rendering.",
      " * @property {string} title - The title of the portlet.",
      " * @property {function({text: string, url?: string, align?: number}): Object} addLine - Adds a line to the portlet.",
      " */",
      "/**",
      " * @typedef {Object} SimpleListPortlet - The Portlet object used for rendering.",
      " * @property {string} title - The title of the portlet.",
      " * @property {function({id: string, label: string, type: string, align?: string}): ListColumn} addColumn - Adds a list column to the portlet.",
      " * @property {function({column: string, showHrefCol?: string, showView?: boolean, link?: string,",
      " *                      linkParam?: string, linkParamName?: string}): ListColumn} addEditColumn - Adds an Edit or Edit/View column to the portlet.",
      " * @property {function({row: search.Result|Object}): Object} addRow - Adds a row to the portlet.",
      " * @property {function({rows: search.Result[]|Object[]}): Object} addRows - Adds multiple rows to the portlet.",
      " */",
      "/**",
      " * Defines the portlet script trigger point.",
      " * @param {Object} ctx - The script context.",
      " * @param {SimpleFormPortlet|InlineHTMLPortlet|LinksandIndentsPortlet|SimpleListPortlet} ctx.portlet - The Portlet object used for rendering.",
      " * @param {string} ctx.column - The column index for the portlet on the dashboard [left (1), center (2), right (3)].",
      " * @param {string} ctx.entity - The customer ID for the selected customer.",
      " * @returns {void}",
      " * @since 2015.2",
      " */",
      "const render: EntryPoints.Portlet.render = (ctx: EntryPoints.Portlet.renderContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "export { render };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Portlet Script"
  },
  "NS RESTlet Script": {
    "scope": "typescript",
    "prefix": "nstemplaterestlet",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType Restlet",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * Defines the function that is executed when a GET request is sent to a RESTlet. An HTTP response body is returned.",
      " * @param {Object} ctx - The parameters from the HTTP request URL. For all content types, parameters are passed as a JavaScript Object.",
      " * @returns {string|Object} - Returns a string when request Content-Type is 'text/plain'. Returns an Object when request Content-Type is 'application/json' or 'application/xml'.",
      " * @since 2015.2",
      " */",
      "const get = (ctx: EntryPoints.RESTlet.get): string | Record<string, unknown> => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn {};",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn {};",
      "};",
      "",
      "/**",
      " * Defines the function that is executed when a PUT request is sent to a RESTlet. An HTTP response body is returned.",
      " * @param {Object} ctx - The HTTP request body.",
      " *                       - Pass the request body as a string when the request Content-Type is 'text/plain'.",
      " *                       - Pass the request body as a JavaScript Object when the request Content-Type is 'application/json' or ‘application/xml’.",
      " * @returns {string|Object} - Returns a string when request Content-Type is 'text/plain'. Returns an Object when request Content-Type is 'application/json' or 'application/xml'.",
      " * @since 2015.2",
      " */",
      "const put = (ctx: EntryPoints.RESTlet.put): string | Record<string, unknown> => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${5://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn {};",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn {};",
      "};",
      "",
      "/**",
      " * Defines the function that is executed when a POST request is sent to a RESTlet. An HTTP response body is returned.",
      " * @param {Object} ctx - The HTTP request body.",
      " *                       - Pass the request body as a string when the request Content-Type is 'text/plain'.",
      " *                       - Pass the request body as a JavaScript Object when the request Content-Type is 'application/json' or ‘application/xml’.",
      " * @returns {string|Object} - Returns a string when request Content-Type is 'text/plain'. Returns an Object when request Content-Type is 'application/json' or ‘application/xml’.",
      " * @since 2015.2",
      " */",
      "const post = (ctx: EntryPoints.RESTlet.post): string | Record<string, unknown> => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${6://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn {};",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn {};",
      "};",
      "",
      "/**",
      " * Defines the function that is executed when a DELETE request is sent to a RESTlet. An HTTP response body is returned.",
      " * @param {Object} ctx - The parameters from the HTTP request URL. For all content types, parameters are passed as a JavaScript Object.",
      " * @returns {string|Object} - Returns a string when request Content-Type is 'text/plain'. Returns an Object when request Content-Type is 'application/json' or ‘application/xml’.",
      " * @since 2015.2",
      " */",
      "const delete_ = (ctx: EntryPoints.RESTlet.delete_): string | Record<string, unknown> => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${7://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t\treturn {};",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "",
      "\treturn {};",
      "};",
      "",
      "export { get, put, post, delete_ };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x RESTlet Script"
  },
  "NS Scheduled Script": {
    "scope": "typescript",
    "prefix": "nstemplatescheduled",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType ScheduledScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * Defines the Scheduled script trigger point.",
      " * @param {Object} ctx - The script context.",
      " * @param {string} ctx.type - The script execution context. Values are reflected in the ctx.InvocationType enum.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const execute: EntryPoints.Scheduled.execute = (ctx: EntryPoints.Scheduled.executeContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "export { execute };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Scheduled Script"
  },
  "NS SDF Installation Script": {
    "scope": "typescript",
    "prefix": "nstemplatesdfinstallation",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType SDFInstallationScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * Defines what is executed when the script is specified to be run by the SDF deployment (in the deploy.xml file of an SDF project).",
      " * @param {Object} ctx - The script context.",
      " * @param {string} ctx.fromVersion - The version of the SuiteApp currently installed on the account. Specify Null if this is a new installation.",
      " * @param {string} ctx.toVersion - The version of the SuiteApp that will be installed on the account.",
      " * @returns {void}",
      " * @Since 2016.1",
      " */",
      "const run: EntryPoints.SDFInstallation.run = (ctx: EntryPoints.SDFInstallation.runContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "export { run };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x SDF Installation Script"
  },
  "NS Suitelet Script": {
    "scope": "typescript",
    "prefix": "nstemplatesuitelet",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType Suitelet",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * @typedef {Object} ServerRequest - The Portlet object used for rendering.",
      " * @property {string} body - The server request body.",
      " * @property {Object} files - The server request files.",
      " * @property {Object} headers - The server request headers.",
      " * @property {string} clientIpAddress - The remote client IP address.",
      " * @property {Method} method - The server request HTTP method.",
      " * @property {Object} parameters - The server request parameters.",
      " * @property {string} url - The server request URL.",
      " * @property {function({group: string}): number} getLineCount - Returns the number of lines in a sublist.",
      " * @property {function({group: string, line: string, name: string}): string} getSublistValue - Returns the value of a sublist line item.",
      " */",
      "/**",
      " * @typedef {Object} ServerResponse - The Portlet object used for rendering.",
      " * @property {Object} headers - The server response headers.",
      " * @property {function({name: string, value: string}): void} addHeader - Adds a header to the response.",
      " * @property {function({name: string}): string|string[]} getHeader - Returns the value of a response header.",
      " * @property {function({xmlString: string}): void} renderPdf - Generates and renders a PDF directly to the response.",
      " * @property {function({identifier: number|string, type: RedirectType, editMode?: boolean,",
      " *                      id?: number|string, parameters?: Object}): void} sendRedirect - Sets the redirect URL by resolving to a NetSuite resource.",
      " * @property {function({type: CacheDuration}): void} setCdnCacheable - Sets CDN caching for a period of time.",
      " * @property {function({name: string, value: string}): void} setHeader - Sets the value of a response header.",
      " * @property {function({output: string}): void} write - Writes information (text, xml, html) to the response.",
      " * @property {function({file: File, isInline?: boolean}): void} writeFile - Writes a file to the response.",
      " * @property {function({output: string}): void} writeLine - Writes line information (text, xml, html) to the response.",
      " * @property {function({pageObject: Assistant|Form|List}): void} writePage - Generates a page.",
      " */",
      "/**",
      " * Defines the Suitelet script trigger point.",
      " * @param {Object} ctx - The script context.",
      " * @param {ServerRequest} ctx.request - The incoming request.",
      " * @param {ServerResponse} ctx.response - The Suitelet response.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const onRequest: EntryPoints.Suitelet.onRequest = (ctx: EntryPoints.Suitelet.onRequestContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\tif (ctx.request.method === 'GET') {",
      "\t\t\t${4://}${0}",
      "\t\t}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, undefined, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "export { onRequest };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Suitelet Script"
  },
  "NS User Event Script": {
    "scope": "typescript",
    "prefix": "nstemplateuserevent",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType UserEventScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * Defines the function that is executed before a record is loaded; that is, whenever a read operation occurs on a record, and prior to returning the record or page.",
      " * @param {Object} ctx - The script context.",
      " * @param {Form} ctx.form - The current form.",
      " * @param {Record} ctx.newRecord - The new record.",
      " * @param {ServerRequest} ctx.request - The HTTP request information sent by the browser.",
      " * @param {string} ctx.type - The trigger type.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const beforeLoad: EntryPoints.UserEvent.beforeLoad = (ctx: EntryPoints.UserEvent.beforeLoadContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, ctx.newRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed before a record is submitted; that is, prior to any write operation on the record.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.newRecord - The new record.",
      " * @param {Record} ctx.oldRecord - The old record.",
      " * @param {string} ctx.type - The trigger type.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const beforeSubmit: EntryPoints.UserEvent.beforeSubmit = (ctx: EntryPoints.UserEvent.beforeSubmitContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${5://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, ctx.newRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "/**",
      " * Defines the function that is executed after a record is submitted.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.newRecord - The new record.",
      " * @param {Record} ctx.oldRecord - The old record.",
      " * @param {string} ctx.type - The trigger type.",
      " * @returns {void}",
      " * @Since 2015.2",
      " */",
      "const afterSubmit: EntryPoints.UserEvent.afterSubmit = (ctx: EntryPoints.UserEvent.afterSubmitContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${6://}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, ctx.newRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "export { beforeLoad, beforeSubmit, afterSubmit };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x User Event Script"
  },
  "NS Workflow Action Script": {
    "scope": "typescript",
    "prefix": "nstemplateworkflowaction",
    "body": [
      "/**",
      " * @NApiVersion 2.1",
      " * @NScriptType WorkflowActionScript",
      " * @NModuleScope SameAccount",
      " * Author: ${1:Name}",
      " * Date: $CURRENT_MONTH/$CURRENT_DATE/$CURRENT_YEAR",
      " * Version: 1.0",
      " * Description: ${2:...}",
      " */",
      "",
      "import * as log from 'N/log';",
      "import { EntryPoints } from 'N/types';",
      "",
      "import { INotificationOpts, notify } from '../netsuite_modules/error-notification/index';",
      "",
      "const errOptions: INotificationOpts = { slackUsername: '${3}', privateSlackNotification: true, emailNotification: false, priority: 'low' };",
      "",
      "/**",
      " * Definition of the Suitelet script trigger point.",
      " * @param {Object} ctx - The script context.",
      " * @param {Record} ctx.newRecord - The new record.",
      " * @param {Record} ctx.oldRecord - The old record.",
      " * @param {Form=} ctx.form - The current form that the script uses to interact with the record. This parameter is available only in the beforeLoad context.",
      " * @param {string=} ctx.type - An event type, such as create, edit, view, or delete.",
      " * @param {number=} ctx.workflowId - The internal ID of the workflow that calls the script.",
      " * @returns {void}",
      " * @Since 2016.1",
      " */",
      "const onAction: EntryPoints.WorkflowAction.onAction = (ctx: EntryPoints.WorkflowAction.onActionContext): void => {",
      "\tconst startTime = new Date().getTime();",
      "",
      "\ttry {",
      "\t\t${4://}${0}",
      "\t} catch (err) {",
      "\t\tlog.error('Error', err);",
      "\t\tnotify(err, ctx.newRecord, errOptions);",
      "\t}",
      "",
      "\tconst elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "\tlog.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);",
      "};",
      "",
      "export { onAction };",
      ""
    ],
    "description": "Generates a NetSuite SuiteScript 2.x Workflow Action Script"
  },
  "NS Import Module": {
    "scope": "typescript",
    "prefix": "nsimport",
    "body": [
      "import * as ${1} from 'N/${1|action,auth,cache,certificateControl,commerce/recordView,compress,config,crypto,crypto/certificate,currency,currentRecord,dataset,email,encode,error,file,format,format/i18n,http,https,https/clientCertificate,keyControl,log,piremoval,plugin,portlet,query,record,recordContext,redirect,render,runtime,search,sftp,sso,task,task/accounting/recognition,transaction,translation,ui/dialog,ui/message,ui/serverWidget,url,util,workbook,workflow,xml|}';"
    ],
    "description": "Import a NetSuite module"
  },
  "NS Import Error Notifier": {
    "scope": "typescript",
    "prefix": "nsimporterrornotifier",
    "body": [
      "import errorNotifier = require('../netsuite_modules/error-notification/index');${0}"
    ],
    "description": "Import the Error Notifier module"
  },
  "NS Import TS-Polyfill": {
    "scope": "typescript",
    "prefix": "nsimporttspolyfill",
    "body": [
      "import 'ts-polyfill';${0}"
    ],
    "description": "Import TS-Polyfill"
  },
  "NS Import Export To File": {
    "scope": "typescript",
    "prefix": "nsimportexporttofile",
    "body": [
      "import exportToFile = require('../netsuite_modules/export-to-csv-excel-btn/index');${0}"
    ],
    "description": "Import Export To File"
  },
  "NS Duration Tracking": {
    "scope": "typescript",
    "prefix": ["nsduration", "nselapsed"],
    "body": [
      "const startTime = new Date().getTime();",
      "${0}",
      "const elapsedSeconds = (new Date().getTime() - startTime) / 1000;",
      "log.debug('Elapsed Time', `\\${elapsedSeconds\\} seconds`);"
    ],
    "description": "Durration Tracking code snippet for NS scripts"
  },
  "NS Log.Audit": {
    "scope": "typescript",
    "prefix": "logaudit",
    "body": [
      "log.audit(`${1:Message}`, ${2});${0}"
    ],
    "description": "NS Log.Audit"
  },
  "NS Log.Debug": {
    "scope": "typescript",
    "prefix": "logdebug",
    "body": [
      "log.debug(`${1:Message}`, ${2});${0}"
    ],
    "description": "NS Log.Debug"
  },
  "NS Log.Error": {
    "scope": "typescript",
    "prefix": "logerror",
    "body": [
      "log.error(`${1:ERROR}`, ${2});${0}"
    ],
    "description": "NS Log.Error"
  },
  "NS Function Create Record Link": {
    "scope": "typescript",
    "prefix": "nsfunctioncreaterecordlink",
    "body": [
      "const createRecordLink = (recordType: string, recordId: string, isEditMode: boolean = false, linkText: string): string => {",
      "\tconst recURL = url.resolveRecord({ recordType, recordId, isEditMode });",
      "\treturn recURL && linkText ? `<a href=\"\\${recURL}\" target=\"_blank\">\\${linkText}</a>` : '';",
      "};${0}"
    ],
    "description": "NS Function Create Record Link"
  },
  "NS Function Create Record URL": {
    "scope": "typescript",
    "prefix": "nsfunctioncreaterecordurl",
    "body": [
      "const createRecordURL = (recordType: string, recordId: (number | string), isEditMode: boolean = false): string => {",
      "\tconst scheme = 'https://';",
      "\tconst domain = url.resolveDomain({ hostType: url.HostType.APPLICATION });",
      "\tconst recURL = url.resolveRecord({ recordType, recordId, isEditMode });",
      "\treturn `\\${scheme}\\${domain}\\${recURL}`;",
      "};${0}"
    ],
    "description": "NS Function Create Record URL"
  },
  "NS Transaction Saved Search": {
    "scope": "typescript",
    "prefix": "nstransactionsavedsearch",
    "body": [
      "const transactionSearchColInternalId = search.createColumn({ name: 'internalid' });",
      "const transactionSearchColType = search.createColumn({ name: 'type' });",
      "const transactionSearchColDate = search.createColumn({ name: 'trandate' });",
      "const transactionSearch = search.create({",
      "\ttype: 'transaction',",
      "\tfilters: [",
      "\t\t['mainline', 'is', 'T'],",
      "\t],",
      "\tcolumns: [",
      "\t\ttransactionSearchColInternalId,",
      "\t\ttransactionSearchColType,",
      "\t\ttransactionSearchColDate,",
      "\t],",
      "});",
      "// transactionSearch.run().each((result: search.Result): boolean => {",
      "//   // Note: .each() is limited to 4,000 results",
      "//   return true;",
      "// });",
      "//",
      "const transactionSearchPagedData = transactionSearch.runPaged({ pageSize: 1000 });",
      "for (let i = 0; i < transactionSearchPagedData.pageRanges.length; i++) {",
      "\tconst transactionSearchPage = transactionSearchPagedData.fetch({ index: i });",
      "\ttransactionSearchPage.data.forEach((result: search.Result): void => {",
      "\t\tconst internalId = <string>result.getValue(transactionSearchColInternalId);",
      "\t\tconst type = <string>result.getValue(transactionSearchColType);",
      "\t\tconst date = <string>result.getValue(transactionSearchColDate);",
      "",
      "\t\t${1:log.debug('Transaction', `\\${internalId\\} \\${type\\} \\${date\\}`);}${0}",
      "\t});",
      "}"
    ],
    "description": "Create a basic Transaction Saved Search"
  },
  "NS Item Saved Search": {
    "scope": "typescript",
    "prefix": "nsitemsavedsearch",
    "body": [
      "const itemSearchColInternalId = search.createColumn({ name: 'internalid' });",
      "const itemSearchColType = search.createColumn({ name: 'type' });",
      "const itemSearchColName = search.createColumn({ name: 'itemid' });",
      "const itemSearch = search.create({",
      "\ttype: 'item',",
      "\tfilters: [],",
      "\tcolumns: [",
      "\t\titemSearchColInternalId,",
      "\t\titemSearchColType,",
      "\t\titemSearchColName,",
      "\t],",
      "});",
      "// itemSearch.run().each((result: search.Result): boolean => {",
      "//   // Note: .each() is limited to 4,000 results",
      "//   return true;",
      "// });",
      "//",
      "const itemSearchPagedData = itemSearch.runPaged({ pageSize: 1000 });",
      "for (let i = 0; i < itemSearchPagedData.pageRanges.length; i++) {",
      "\tconst itemSearchPage = itemSearchPagedData.fetch({ index: i });",
      "\titemSearchPage.data.forEach((result: search.Result): void => {",
      "\t\tconst internalId = <string>result.getValue(itemSearchColInternalId);",
      "\t\tconst type = <string>result.getValue(itemSearchColType);",
      "\t\tconst name = <string>result.getValue(itemSearchColName);",
      "",
      "\t\t${1:log.debug('Item', `\\${internalId\\} \\${type\\} \\${name\\}`);}${0}",
      "\t});",
      "}"
    ],
    "description": "Create a basic Item Saved Search"
  }
}
